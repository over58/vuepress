(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{439:function(n,e,t){"use strict";t.r(e);var a=t(42),o=Object(a.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h3",{attrs:{id:"只记录核心代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#只记录核心代码"}},[this._v("#")]),this._v(" 只记录核心代码")]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("    import cytoscape from 'cytoscape'\n    import edgehandles from 'cytoscape-edgehandles'\n    cytoscape.use(edgehandles)\n\n\n      let makeSvg = function (node) {\n        let data = node.data()\n        return { image: data.image || 'none', width: 50, height: 50 }\n      }\n\n\n      const cy = cytoscape({\n        container: this.$refs.topology,\n        layout: {\n          name: 'breadthfirst',\n          directed: true\n        },\n        userZoomingEnabled: false,\n\n        style: [\n          {\n            selector: 'node',\n            style: {\n              shape: 'ellipse', // rectangle vee pentagon\n              content: function (ele) {\n                const data = ele.data()\n                if (data.title) {\n                  return `${data.title}-${data.name}`\n                } else {\n                  return `${data.id}`\n                }\n              },\n              'text-valign': 'center',\n              'text-halign': 'right',\n              'color': 'data(color)',\n              'background-color': 'data(color)',\n              'background-image': function (node) { return makeSvg(node).image },\n              'background-width': '60%',\n              'background-height': '60%',\n              'width': function (node) { return makeSvg(node).width },\n              'height': function (node) { return makeSvg(node).height },\n              'text-rotation': function (node) {  //根据条件旋转文字，避免节点太多文字相互覆盖\n                let data = node.data()\n                if (data.level === 3 && level3Len > 10) {\n                  return 45\n                } else {\n                  return 0\n                }\n              }\n            }\n          },\n          {\n            'selector': 'node:selected',\n            'style': {\n              'min-zoomed-font-size': 0,\n              'z-index': 9999,\n              'border-color': 'black',\n              'border-width': 2,\n              'color': 'black'\n            }\n          },\n\n          {\n            selector: 'edge',\n            style: {\n              'curve-style': 'straight',\n              'target-arrow-shape': 'triangle',\n              'line-color': 'gray',\n              'width': 0.8,\n              'line-style': 'data(lineStyle)'\n            }\n          }\n        ],\n\n        elements: {\n          nodes: nodes,\n          edges: edges\n        }\n      })\n\n      cy.on('tap', 'node', function (evt) {\n        let data = evt.target.data()\n        if (data.click) {\n          vm.getIpStat(data.ip)\n        }\n      })\n")])])])])}),[],!1,null,null,null);e.default=o.exports}}]);