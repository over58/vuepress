(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{454:function(n,e,t){"use strict";t.r(e);var l=t(42),a=Object(l.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h3",{attrs:{id:"效果图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#效果图"}},[n._v("#")]),n._v(" 效果图")]),n._v(" "),t("p",[t("img",{attrs:{src:"/images/btn-popup-1.png",alt:"btn-popup-1"}}),n._v(" "),t("img",{attrs:{src:"/images/btn-popup-2.png",alt:"btn-popup-2"}})]),n._v(" "),t("h3",{attrs:{id:"代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[n._v("#")]),n._v(" 代码")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<template>\n    <Poptip :width="width" placement="bottom-start" trigger="click">\n        <Button>{{title}}{{checkAll ? \'(全选)\' : \'\'}}</Button>\n\n        <div class="content" slot="content">\n          <Input v-model="search" class="item"/>\n          <Checkbox v-model="checkAll" class="item" label="all" @on-change="handleChangeAll">全部</Checkbox>\n          <CheckboxGroup v-model="select" @on-change="handleChange">\n            <Checkbox v-for="item in groups" v-show="item.value.indexOf(search) > -1" :key="item.value" :label="item.label" class="item">\n              {{item.label}}\n            </Checkbox>\n          </CheckboxGroup>\n        </div>\n    </Poptip>\n</template>\n<script>\n/**\n * 数据格式:\n * [{label: \'\', value: \'\'}]\n *\n * or\n *\n * [\'XXX1\', \'xxx2\']\n */\nexport default {\n  props: {\n    title: {\n      type: String,\n      required: true\n    },\n    data: {\n      type: Array,\n      required: true\n    },\n    value: {\n      type: Array,\n      required: true\n    },\n    width: {\n      type: Number,\n      default: 100\n    }\n  },\n  data () {\n    return {\n      select: this.value,\n      checkAll: false,\n      search: \'\'\n    }\n  },\n  computed: {\n    groups () {\n      return this.data.map(item => {\n        if (typeof item === \'string\') {\n          return {\n            label: item,\n            value: item\n          }\n        } else if (typeof item === \'object\') {\n          if ((\'value\' in item) && (\'label\' in item)) {\n            return item\n          }\n        } else {\n          throw new Error(\'data is valid\')\n        }\n      })\n    }\n  },\n  watch: {\n    value () {\n      this.init()\n    }\n  },\n  methods: {\n    handleChange (val) {\n      if (val.length === this.data.length) {\n        this.select = this.data\n        this.checkAll = true\n      } else {\n        this.checkAll = false\n      }\n      this.$emit(\'on-change\', this.select)\n    },\n    handleChangeAll (checkAll) {\n      if (checkAll) {\n        this.select = this.data\n      } else {\n        this.select = []\n      }\n      this.$emit(\'on-change\', this.select)\n    },\n    init () {\n      this.select = this.value\n      if (this.select.length === this.data.length) {\n        this.checkAll = true\n      } else {\n        this.checkAll = false\n      }\n    }\n  },\n  mounted () {\n    this.init()\n  }\n}\n<\/script>\n\n<style lang="less" scoped>\n.content{\n  overflow: hidden;\n}\n.item{\n  display: block;\n  text-overflow: ellipsis;\n}\n</style>\n\n')])])])])}),[],!1,null,null,null);e.default=a.exports}}]);