(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{400:function(n,e,t){"use strict";t.r(e);var a=t(42),v=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("p",[n._v("执行上下文是当前 JavaScript 代码被解析和执行时所在环境的抽象概念。")]),n._v(" "),t("h3",{attrs:{id:"执行上下文的类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文的类型"}},[n._v("#")]),n._v(" 执行上下文的类型")]),n._v(" "),t("p",[n._v("执行上下文总共有三种类型")]),n._v(" "),t("p",[n._v("1.全局执行上下文：只有一个，浏览器中的全局对象就是 window 对象，this 指向这个全局对象。")]),n._v(" "),t("p",[n._v("2.函数执行上下文：存在无数个，只有在函数被调用的时候才会被创建，每次调用函数都会创建一个新的执行上下文。")]),n._v(" "),t("p",[n._v("3.Eval 函数执行上下文： 指的是运行在 eval 函数中的代码，不用很少用而且不建议使用。")]),n._v(" "),t("h3",{attrs:{id:"执行栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#执行栈"}},[n._v("#")]),n._v(" 执行栈")]),n._v(" "),t("p",[n._v("执行栈，也叫调用栈，具有 LIFO（后进先出）结构，用于存储在代码执行期间创建的所有执行上下文。")]),n._v(" "),t("p",[n._v("首次运行JS代码时，会创建一个全局执行上下文并Push到当前的执行栈中。每当发生函数调用，引擎都会为该函数创建一个新的函数执行上下文并Push到当前执行栈的栈顶。")]),n._v(" "),t("p",[n._v("根据执行栈LIFO规则，当栈顶函数运行完成后，其对应的函数执行上下文将会从执行栈中Pop出，上下文控制权将移到当前执行栈的下一个执行上下文。")]),n._v(" "),t("h3",{attrs:{id:"执行上下文的创建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文的创建"}},[n._v("#")]),n._v(" 执行上下文的创建")]),n._v(" "),t("p",[n._v("执行上下文分两个阶段创建：1）创建阶段； 2）执行阶段")]),n._v(" "),t("p",[n._v("创建阶段")]),n._v(" "),t("p",[n._v("1、确定 this 的值，也被称为 This Binding。")]),n._v(" "),t("p",[n._v("2、LexicalEnvironment（词法环境） 组件被创建。")]),n._v(" "),t("p",[n._v("3、VariableEnvironment（变量环境） 组件被创建。")]),n._v(" "),t("p",[n._v("直接看伪代码可能更加直观")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("ExecutionContext = {  \n  ThisBinding = <this value>,     // 确定this \n  LexicalEnvironment = { ... },   // 词法环境\n  VariableEnvironment = { ... },  // 变量环境\n}\n")])])]),n._v(" "),t("h4",{attrs:{id:"this-binding"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#this-binding"}},[n._v("#")]),n._v(" This Binding")]),n._v(" "),t("p",[n._v("全局执行上下文中，this 的值指向全局对象，在浏览器中this 的值指向 window对象，而在nodejs中指向这个文件的module对象。")]),n._v(" "),t("p",[n._v("函数执行上下文中，this 的值取决于函数的调用方式。具体有：默认绑定、隐式绑定、显式绑定（硬绑定）、new绑定、箭头函数，具体内容会在【this全面解析】部分详解。")]),n._v(" "),t("h4",{attrs:{id:"词法环境-lexical-environment"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#词法环境-lexical-environment"}},[n._v("#")]),n._v(" 词法环境（Lexical Environment）")]),n._v(" "),t("ul",[t("li",[n._v("Global code:通俗点讲就是源文件代码，就是一个词法环境")]),n._v(" "),t("li",[n._v("函数代码 ：一个函数块内自己是一个新的词法环境")]),n._v(" "),t("li",[n._v("eval：进入eval调用的代码有时会创建一个新的词法环境")]),n._v(" "),t("li",[n._v("with结构：一个with结构块内也是自己一个词法环境")]),n._v(" "),t("li",[n._v("catch结构：一个catch结构快内也是自己一个词环境")])]),n._v(" "),t("blockquote",[t("p",[n._v("读到这里有些小伙伴急了，“不对，不对，我记得只有在全局代码、函数代码、和eval代码三种情况，才会创建运行上下文，你专门有5种”。对，你说的没错，只有在全局代码、函数代码、和eval代码三种情况，才会创建运行上下文，但我这里说的是词法环境，Lexical Environments。不是运行上下文。")])]),n._v(" "),t("p",[n._v("作者：G哥讲码堂\n链接：https://juejin.im/post/5c05120be51d4513416d2111\n来源：掘金")]),n._v(" "),t("p",[n._v("词法环境有两个组成部分")]),n._v(" "),t("p",[n._v("1、环境记录：存储变量和函数声明的实际位置")]),n._v(" "),t("h5",{attrs:{id:"环境记录分为两种"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#环境记录分为两种"}},[n._v("#")]),n._v(" 环境记录分为两种")]),n._v(" "),t("p",[n._v("declarative environment records 主要用于函数 、catch词法环境\nobject environment records.     主要用于with 和global的词法环境")]),n._v(" "),t("p",[n._v("declarative environment records可以简单理解为字典类型的结构，key-value形式结论变量等对应的名字和值。\n而object environment records会关联一个对象，用这个对象的属性-值来登记变量等对应的名字和值。")]),n._v(" "),t("p",[n._v("2、对外部环境的引用：可以访问其外部词法环境")]),n._v(" "),t("p",[n._v("词法环境有两种类型")]),n._v(" "),t("p",[n._v("1、全局环境：是一个没有外部环境的词法环境，其外部环境引用为 null。拥有一个全局对象（window 对象）及其关联的方法和属性（例如数组方法）以及任何用户自定义的全局变量，this 的值指向这个全局对象。")]),n._v(" "),t("p",[n._v("2、函数环境：用户在函数中定义的变量被存储在环境记录中，包含了arguments 对象。对外部环境的引用可以是全局环境，也可以是包含内部函数的外部函数环境。")]),n._v(" "),t("p",[n._v("直接看伪代码可能更加直观")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('GlobalExectionContext = {  // 全局执行上下文\n  LexicalEnvironment: {          // 词法环境\n    EnvironmentRecord: {           // 环境记录\n      Type: "Object",                 // 全局环境\n      // 标识符绑定在这里 \n      outer: <null>                 // 对外部环境的引用\n  }  \n}\n\nFunctionExectionContext = { // 函数执行上下文\n  LexicalEnvironment: {        // 词法环境\n    EnvironmentRecord: {          // 环境记录\n      Type: "Declarative",         // 函数环境\n      // 标识符绑定在这里               // 对外部环境的引用\n      outer: <Global or outer function environment reference>  \n  }  \n}\n')])])]),t("h4",{attrs:{id:"变量环境"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量环境"}},[n._v("#")]),n._v(" 变量环境")]),n._v(" "),t("p",[n._v("变量环境也是一个词法环境，因此它具有上面定义的词法环境的所有属性。")]),n._v(" "),t("p",[n._v("在 ES6 中，词法 环境和 变量 环境的区别在于前者用于存储函数声明和变量（ let 和 const ）绑定，而后者仅用于存储变量（ var ）绑定。")]),n._v(" "),t("p",[n._v("使用例子进行介绍")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('let a = 20;  \nconst b = 30;  \nvar c;\n\nfunction multiply(e, f) {  \n var g = 20;  \n return e * f * g;  \n}\n\nc = multiply(20, 30);\n执行上下文如下所示\n\nGlobalExectionContext = {\n\n  ThisBinding: <Global Object>,\n\n  LexicalEnvironment: {  \n    EnvironmentRecord: {  \n      Type: "Object",  \n      // 标识符绑定在这里  \n      a: < uninitialized >,  \n      b: < uninitialized >,  \n      multiply: < func >  \n    }  \n    outer: <null>  \n  },\n\n  VariableEnvironment: {  \n    EnvironmentRecord: {  \n      Type: "Object",  \n      // 标识符绑定在这里  \n      c: undefined,  \n    }  \n    outer: <null>  \n  }  \n}\n\nFunctionExectionContext = {  \n\n  ThisBinding: <Global Object>,\n\n  LexicalEnvironment: {  \n    EnvironmentRecord: {  \n      Type: "Declarative",  \n      // 标识符绑定在这里  \n      Arguments: {0: 20, 1: 30, length: 2},  \n    },  \n    outer: <GlobalLexicalEnvironment>  \n  },\n\n  VariableEnvironment: {  \n    EnvironmentRecord: {  \n      Type: "Declarative",  \n      // 标识符绑定在这里  \n      g: undefined  \n    },  \n    outer: <GlobalLexicalEnvironment>  \n  }  \n}\n')])])]),t("p",[n._v("变量提升的原因：在创建阶段，函数声明存储在环境中，而变量会被设置为 undefined（在 var 的情况下）或保持未初始化（在 let 和 const 的情况下）。所以这就是为什么可以在声明之前访问 var 定义的变量（尽管是 undefined ），但如果在声明之前访问 let 和 const 定义的变量就会提示引用错误的原因。这就是所谓的变量提升。")]),n._v(" "),t("h3",{attrs:{id:"执行阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#执行阶段"}},[n._v("#")]),n._v(" 执行阶段")]),n._v(" "),t("p",[n._v("此阶段，完成对所有变量的分配，最后执行代码。")]),n._v(" "),t("p",[n._v("如果 Javascript 引擎在源代码中声明的实际位置找不到 let 变量的值，那么将为其分配 undefined 值。")])])}),[],!1,null,null,null);e.default=v.exports}}]);