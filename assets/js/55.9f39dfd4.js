(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{401:function(t,n,e){"use strict";e.r(n);var a=e(42),r=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h4",{attrs:{id:"apply"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#apply"}},[t._v("#")]),t._v(" apply")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('Function.prototype.myapply = function(context, arr) {\n  var context = Object(context) || window;\n  context.fn = this;\n\n  var result;\n  if (!arr) {\n    result = context.fn();\n  } else {\n    var args = [];\n    for (var i = 0, len = arr.length; i < len; i++) {\n      args.push("arr[" + i + "]");\n    }\n    result = eval("context.fn(" + args + ")");\n  }\n\n  delete context.fn;\n  return result;\n};\n')])])]),e("h4",{attrs:{id:"call"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#call"}},[t._v("#")]),t._v(" call")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Function.prototype.myCall = function(context) {\n  context.fn = this\n  let args = Array.prototype.slice(arguments, 1)\n  let result = context.fn(...args)\n  delete context.fn\n  return result\n}\n")])])]),e("h4",{attrs:{id:"instanceof"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#instanceof"}},[t._v("#")]),t._v(" instanceof")]),t._v(" "),e("p",[t._v("都知道instanceof实际上是用来判断对象的原型链上面能不能找到指定类型的原型。然后就按照这个原理来写歌demo")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function instance_of(l, r){\n    let proto = r.__proto__\n    l = l.__proto__\n    while(l) {\n        if (l === proto) return true\n        if(l === null) return false\n        l = l.__proto__\n    }\n    return false\n}\n")])])])])}),[],!1,null,null,null);n.default=r.exports}}]);