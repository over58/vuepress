(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{403:function(e,t,n){"use strict";n.r(t);var a=n(42),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h3",{attrs:{id:"概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[e._v("#")]),e._v(" 概念")]),e._v(" "),n("h4",{attrs:{id:"浅拷贝"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#浅拷贝"}},[e._v("#")]),e._v(" 浅拷贝")]),e._v(" "),n("p",[e._v("创建一个新的对象，这个对象有着对原始对象的属性值的一份拷贝。如果属性是基本类型，拷贝的就是基本类型的值；如果是引用对象，拷贝的是地址。所以如果其中一个对象改变了这个地址，就是影响另一个对象")]),e._v(" "),n("h4",{attrs:{id:"深拷贝"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝"}},[e._v("#")]),e._v(" 深拷贝")]),e._v(" "),n("p",[e._v("将一个对象从内存中完整的拷贝一份出来，从堆中开辟出一个新的区域来存放新对象，且修改新的对象不会影响到原对象")]),e._v(" "),n("h3",{attrs:{id:"简易版-实际上也是项目中最常用的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简易版-实际上也是项目中最常用的"}},[e._v("#")]),e._v(" 简易版(实际上也是项目中最常用的)")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("JSON.parse(JSON.stringify(原对象))\n")])])]),n("h3",{attrs:{id:"基础版"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基础版"}},[e._v("#")]),e._v(" 基础版")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function deep_clone1 (source) {\n  if (typeof source === 'object') {\n    let target = {}\n    for(let key in source) {\n      target[key] = clone(source[key])\n    }\n    return target\n  }else{\n    return source\n  }\n}\n")])])]),n("p",[e._v("但是很显然，还存在很多问题，比如并没有考虑数组、循环引用")]),e._v(" "),n("h3",{attrs:{id:"考虑数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#考虑数组"}},[e._v("#")]),e._v(" 考虑数组")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function deep_clone2 (source) {\n  if (typeof source === 'object') {\n    let target = Array.isArray(source) ? [] : {}\n    for(let key in source) {\n      target[key] = clone(source[key])\n    }\n    return target\n  }else{\n    return source\n  }\n}\n")])])]),n("p",[e._v("数组和对象的遍历方式可以一致，就是存储的时候不同，[]和{}")]),e._v(" "),n("h3",{attrs:{id:"处理循环引用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#处理循环引用"}},[e._v("#")]),e._v(" 处理循环引用")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function deep_clone3 (source, map = new Map()) {\n  if (typeof source === 'object') {\n    let target = Array.isArray(source) ? [] : {}\n    // 专门处理循环引用问题（object类型)\n    if(map.get(source)) {\n      return map.get(source)\n    }\n    map.set(source, target)\n\n    for(let key in source) {\n      target[key] = deep_clone3(source[key], map)\n    }\n    return target\n  }else{\n    return source\n  }\n}\n")])])]),n("h3",{attrs:{id:"使用weakmap画龙点睛"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用weakmap画龙点睛"}},[e._v("#")]),e._v(" 使用WeakMap画龙点睛")]),e._v(" "),n("p",[e._v("WeakMap 对象是一组键/值对的集合，其中的键是弱引用的。其键必须是对象，而值可以是任意的。")]),e._v(" "),n("p",[e._v("什么是弱引用呢？")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("在计算机程序设计中，弱引用与强引用相对，是指不能确保其引用的对象不会被垃圾回收器回收的引用。 一个对象若只被弱引用所引用，则被认为是不可访问（或弱可访问）的，并因此可能在任何时刻被回收。\n")])])]),n("p",[e._v("举个例子：\n如果我们使用Map的话，那么对象间是存在强引用关系的：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let obj = { name : 'ConardLi'}\nconst target = new Map();\ntarget.set(obj,'code秘密花园');\nobj = null;\n")])])]),n("p",[e._v("复制代码虽然我们手动将obj，进行释放，然是target依然对obj存在强引用关系，所以这部分内存依然无法被释放。\n再来看WeakMap：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let obj = { name : 'ConardLi'}\nconst target = new WeakMap();\ntarget.set(obj,'code秘密花园');\nobj = null;\n")])])]),n("p",[e._v("复制代码如果是WeakMap的话，target和obj存在的就是弱引用关系，当下一次垃圾回收机制执行时，这块内存就会被释放掉。\n设想一下，如果我们要拷贝的对象非常庞大时，使用Map会对内存造成非常大的额外消耗，而且我们需要手动清除Map的属性才能释放这块内存，而WeakMap会帮我们巧妙化解这个问题。")]),e._v(" "),n("blockquote",[n("p",[e._v("引用ConardLi：https://juejin.im/post/5d6aa4f96fb9a06b112ad5b1")])]),e._v(" "),n("h3",{attrs:{id:"性能优化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#性能优化"}},[e._v("#")]),e._v(" 性能优化")]),e._v(" "),n("p",[e._v("在上面的代码中，我们遍历数组和对象都使用了for in这种方式，实际上for in在遍历时效率是非常低的.经过比较执行效率 while > for > for in\n先实现一个通用的forEach 循环， iterate 是遍历的回调函数， 每次接收value和index两个参数：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function forEach(arr, iterate) {\n  let index = -1\n  const len = array.length\n  while(++index < len>) {\n    iterate(array[index], index)\n  }\n  return array\n} \n")])])]),n("p",[e._v("然后对之前的代码进行调整")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function deep_clone3 (source, map = new Map()) {\n  if (typeof source === 'object') {\n    const isArray = Array.isArray(source)\n    let target = isArray ? [] : {}\n    // 专门处理循环引用问题（object类型)\n    if(map.get(source)) {\n      return map.get(source)\n    }\n    map.set(source, target)\n\n    const keys = isArray ? undefined ? Object.keys(source)\n\n    forEach(keys || source, (value, index)) {\n      if (keys) { // 处理对象， value就是对象key\n        key = value\n      }\n      target[key] = deep_clone3(source[key], map)\n    }\n    return target\n  }else{\n    return source\n  }\n}\n")])])]),n("h3",{attrs:{id:"其他数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#其他数据类型"}},[e._v("#")]),e._v(" 其他数据类型")]),e._v(" "),n("h4",{attrs:{id:"可继续遍历的类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#可继续遍历的类型"}},[e._v("#")]),e._v(" 可继续遍历的类型")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const mapTag = '[object Map]';\nconst setTag = '[object Set]';\nconst arrayTag = '[object Array]';\nconst objectTag = '[object Object]';\nconst argsTag = '[object Arguments]';\n\n\nconst deepTag = [mapTag, setTag, arrayTag, objectTag, argsTag];\n\n\nfunction forEach(array, iteratee) {\n    let index = -1;\n    const length = array.length;\n    while (++index < length) {\n        iteratee(array[index], index);\n    }\n    return array;\n}\n\nfunction isObject(target) {\n    const type = typeof target;\n    return target !== null && (type === 'object' || type === 'function');\n}\n\nfunction getType(target) {\n    return Object.prototype.toString.call(target);\n}\n\nfunction getInit(target) {\n    const Ctor = target.constructor;\n    return new Ctor();\n}\n\nfunction clone(target, map = new WeakMap()) {\n\n    // 克隆原始类型\n    if (!isObject(target)) {\n        return target;\n    }\n\n    // 初始化\n    const type = getType(target);\n    let cloneTarget;\n    if (deepTag.includes(type)) {\n        cloneTarget = getInit(target, type);\n    }\n\n    // 防止循环引用\n    if (map.get(target)) {\n        return target;\n    }\n    map.set(target, cloneTarget);\n\n    // 克隆set\n    if (type === setTag) {\n        target.forEach(value => {\n            cloneTarget.add(clone(value));\n        });\n        return cloneTarget;\n    }\n\n    // 克隆map\n    if (type === mapTag) {\n        target.forEach((value, key) => {\n            cloneTarget.set(key, clone(value));\n        });\n        return cloneTarget;\n    }\n\n    // 克隆对象和数组\n    const keys = type === arrayTag ? undefined : Object.keys(target);\n    forEach(keys || target, (value, key) => {\n        if (keys) {\n            key = value;\n        }\n        cloneTarget[key] = clone(target[key], map);\n    });\n\n    return cloneTarget;\n}\n\n")])])]),n("h4",{attrs:{id:"不可继续遍历的类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#不可继续遍历的类型"}},[e._v("#")]),e._v(" 不可继续遍历的类型")]),e._v(" "),n("p",[e._v("Bool、Number、String、Symbol、Date、Error这几种类型我们都可以直接用构造函数和原始数据创建一个新对象：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function cloneOtherType(targe, type) {\n    const Ctor = targe.constructor;\n    switch (type) {\n        case boolTag:\n        case numberTag:\n        case stringTag:\n        case errorTag:\n        case dateTag:\n            return new Ctor(targe);\n        case regexpTag:\n            return cloneReg(targe);\n        case symbolTag:\n            return cloneSymbol(targe);\n        default:\n            return null;\n    }\n}\n\nfunction cloneSymbol(targe) {\n    return Object(Symbol.prototype.valueOf.call(targe));\n}\n\n克隆正则：\n\nfunction cloneReg(targe) {\n    const reFlags = /\\w*$/;\n    const result = new targe.constructor(targe.source, reFlags.exec(targe));\n    result.lastIndex = targe.lastIndex;\n    return result;\n}\n\n")])])]),n("p",[e._v("克隆函数\n首先，我们可以通过prototype来区分下箭头函数和普通函数，箭头函数是没有prototype的。\n我们可以直接使用eval和函数字符串来重新生成一个箭头函数，注意这种方法是不适用于普通函数的。\n我们可以使用正则来处理普通函数：\n分别使用正则取出函数体和函数参数，然后使用new Function ([arg1[, arg2[, ...argN]],] functionBody)构造函数重新构造一个新的函数：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function cloneFunction(func) {\n    const bodyReg = /(?<={)(.|\\n)+(?=})/m;\n    const paramReg = /(?<=\\().+(?=\\)\\s+{)/;\n    const funcString = func.toString();\n    if (func.prototype) {\n        console.log('普通函数');\n        const param = paramReg.exec(funcString);\n        const body = bodyReg.exec(funcString);\n        if (body) {\n            console.log('匹配到函数体：', body[0]);\n            if (param) {\n                const paramArr = param[0].split(',');\n                console.log('匹配到参数：', paramArr);\n                return new Function(...paramArr, body[0]);\n            } else {\n                return new Function(body[0]);\n            }\n        } else {\n            return null;\n        }\n    } else {\n        return eval(funcString);\n    }\n}\n\n作者：ConardLi\n链接：https://juejin.im/post/5d6aa4f96fb9a06b112ad5b1\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n")])])]),n("blockquote",[n("p",[e._v("原文https://juejin.im/post/5d6aa4f96fb9a06b112ad5b1")])])])}),[],!1,null,null,null);t.default=r.exports}}]);