(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{422:function(e,t,s){"use strict";s.r(t);var r=s(42),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h3",{attrs:{id:"http访问控制-cors-概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http访问控制-cors-概念"}},[e._v("#")]),e._v(" http访问控制(cors)概念")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("跨域资源共享(CORS) 是一种机制，它使用额外的 HTTP 头来告诉浏览器  让运行在一个 origin (domain) 上的Web应用被准许访问来自不同源服务器上的指定的资源。\n")])])]),s("p",[e._v("出于安全原因，浏览器限制从脚本内"),s("strong",[e._v("发起")]),e._v("的跨源HTTP请求。")]),e._v(" "),s("blockquote",[s("p",[e._v("⚠️不一定是浏览器限制了发起跨站请求，也可能是跨站请求可以正常发起，但是返回结果被浏览器拦截了")])]),e._v(" "),s("h3",{attrs:{id:"简单请求-满足下面所有条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简单请求-满足下面所有条件"}},[e._v("#")]),e._v(" 简单请求: (满足下面所有条件)")]),e._v(" "),s("p",[e._v("方法：GET、HEAD、POST\nContent-Typ为下面三个值之一：text/plain 、mutipart/form-data 、application/x-www-data-urlencoded")]),e._v(" "),s("h3",{attrs:{id:"复杂请求【预检请求】-满足下面任一条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#复杂请求【预检请求】-满足下面任一条件"}},[e._v("#")]),e._v(" 复杂请求【预检请求】（满足下面任一条件）")]),e._v(" "),s("p",[e._v('与前述简单请求不同，“需预检的请求”要求必须首先使用 OPTIONS 方法发起一个预检请求到服务器，以获知服务器是否允许该实际请求。"预检请求“的使用，可以避免跨域请求对服务器的用户数据产生未预期的影响。\t\n当请求满足下述任一条件时，即应首先发送预检请求：')]),e._v(" "),s("ul",[s("li",[e._v("使用了下面任一 HTTP 方法：")])]),e._v(" "),s("ol",[s("li",[e._v("PUT")]),e._v(" "),s("li",[e._v("DELETE")]),e._v(" "),s("li",[e._v("CONNECT")]),e._v(" "),s("li",[e._v("OPTIONS")]),e._v(" "),s("li",[e._v("TRACE")]),e._v(" "),s("li",[e._v("PATCH")])]),e._v(" "),s("ul",[s("li",[e._v("人为设置了对 CORS 安全的首部字段集合之外的其他首部字段。该集合为：")])]),e._v(" "),s("ol",[s("li",[e._v("Accept")]),e._v(" "),s("li",[e._v("Accept-Language")]),e._v(" "),s("li",[e._v("Content-Language")]),e._v(" "),s("li",[e._v("Content-Type (需要注意额外的限制)")])]),e._v(" "),s("ul",[s("li",[e._v("Content-Type 的值不属于下列之一:")])]),e._v(" "),s("ol",[s("li",[e._v("application/x-www-form-urlencoded")]),e._v(" "),s("li",[e._v("multipart/form-data")]),e._v(" "),s("li",[e._v("text/plain")])]),e._v(" "),s("ul",[s("li",[e._v("请求中的XMLHttpRequestUpload 对象注册了任意多个事件监听器。")]),e._v(" "),s("li",[e._v("请求中使用了ReadableStream对象。")])]),e._v(" "),s("h3",{attrs:{id:"http响应首部字段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http响应首部字段"}},[e._v("#")]),e._v(" HTTP响应首部字段：")]),e._v(" "),s("h4",{attrs:{id:"access-control-allow-origin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#access-control-allow-origin"}},[e._v("#")]),e._v(" Access-Control-Allow-Origin")]),e._v(" "),s("h4",{attrs:{id:"access-control-expose-headers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#access-control-expose-headers"}},[e._v("#")]),e._v(" Access-Control-Expose-Headers")]),e._v(" "),s("p",[e._v("让服务器把允许浏览器访问的头放入白名单。在跨域访问时，XMLHttpRequest对象的getResponseHeader()方法只能拿到一些最基本的响应头，Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma，如果要访问其他头，则需要服务器设置本响应头。")]),e._v(" "),s("h4",{attrs:{id:"access-control-max-age"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#access-control-max-age"}},[e._v("#")]),e._v(" Access-Control-Max-Age")]),e._v(" "),s("p",[e._v("指定了preflight请求的结果能够被缓存多久")]),e._v(" "),s("h4",{attrs:{id:"access-control-allow-credentials"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#access-control-allow-credentials"}},[e._v("#")]),e._v(" Access-Control-Allow-Credentials")]),e._v(" "),s("p",[e._v("指定了当浏览器的credentials设置为true时是否允许浏览器读取response的内容。当用在对preflight预检测请求的响应中时，它指定了实际的请求是否可以使用credentials。请注意：简单 GET 请求不会被预检；如果对此类请求的响应中不包含该字段，这个响应将被忽略掉，并且浏览器也不会将相应内容返回给网页")]),e._v(" "),s("h4",{attrs:{id:"access-control-allow-methods"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#access-control-allow-methods"}},[e._v("#")]),e._v(" Access-Control-Allow-Methods")]),e._v(" "),s("p",[e._v("首部字段用于预检请求的响应。其指明了实际请求所允许使用的 HTTP 方法")]),e._v(" "),s("h4",{attrs:{id:"access-control-allow-headers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#access-control-allow-headers"}},[e._v("#")]),e._v(" Access-Control-Allow-Headers")]),e._v(" "),s("p",[e._v("首部字段用于预检请求的响应。其指明了实际请求中允许携带的首部字段。")]),e._v(" "),s("h3",{attrs:{id:"http请求首部字段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http请求首部字段"}},[e._v("#")]),e._v(" HTTP请求首部字段：")]),e._v(" "),s("h4",{attrs:{id:"origin-首部字段表明预检请求或实际请求的源站。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#origin-首部字段表明预检请求或实际请求的源站。"}},[e._v("#")]),e._v(" Origin 首部字段表明预检请求或实际请求的源站。")]),e._v(" "),s("p",[e._v("它不包含任何路径信息，只是服务器名称。Note: 有时候将该字段的值设置为空字符串是有用的，例如，当源站是一个 data URL 时。")]),e._v(" "),s("h4",{attrs:{id:"access-control-request-method"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#access-control-request-method"}},[e._v("#")]),e._v(" Access-Control-Request-Method")]),e._v(" "),s("p",[e._v("首部字段用于预检请求。其作用是，将实际请求所使用的 HTTP 方法告诉服务器。")]),e._v(" "),s("h4",{attrs:{id:"access-control-request-headers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#access-control-request-headers"}},[e._v("#")]),e._v(" Access-Control-Request-Headers")]),e._v(" "),s("p",[e._v("首部字段用于预检请求。其作用是，将实际请求所携带的首部字段告诉服务器。")]),e._v(" "),s("p",[e._v("摘录自https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS")]),e._v(" "),s("h3",{attrs:{id:"最后来一个小demo吧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最后来一个小demo吧"}},[e._v("#")]),e._v(" 最后来一个小demo吧")]),e._v(" "),s("p",[e._v("index1.html")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <meta http-equiv="X-UA-Compatible" content="ie=edge">\n  <title>Document</title>\n</head>\n<body>\n  port: 9000 index page\n  \x3c!-- <script src="http://127.0.0.1:9001/"><\/script> --\x3e\n  <script>\n    var xhr = new XMLHttpRequest()\n    xhr.open(\'put\', \'http://127.0.0.1:9001/\')\n    // xhr.setRequestHeader(\'X-Custom-Field\', \'custom-field\')\n    xhr.send()\n  <\/script>\n</body>\n</html>\n')])])]),s("p",[e._v("server1.js")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const http = require('http');\nconst fs = require('fs')\n\nhttp.createServer(function(req, res) {\n  if(req.url === '/') {\n    file = fs.readFileSync('./index1.html', 'utf-8')\n    res.writeHead(200, {\n      'Content-Type': 'text/html'\n    })\n    res.end(file)\n  }\n}).listen(9000, '127.0.0.1')\n")])])]),s("p",[e._v("server2.js")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const http = require('http');\n\n// http.createServer(function(req, res) {\n//   if(req.url === '/') {\n//     console.log('come in 127.0.0.1:9001 server')\n//     res.writeHead(200,{\n//       'Content-Type': 'text/plain'\n//     })\n//     res.end('9001 index page')\n//   }\n// }).listen(9001, '127.0.0.1')\n\n\n// http.createServer(function(req, res) {\n//   if(req.url === '/') {\n//     console.log('come in 127.0.0.1:9001 server')\n//     res.writeHead(200,{\n//       'Access-Control-Allow-Origin': '*', // 告诉浏览器允许访问的origin\n//       'Content-Type': 'text/plain' \n//     })\n//     res.end('9001 index page')\n//   }\n// }).listen(9001, '127.0.0.1')\n\n\n\nhttp.createServer(function(req, res) {\n  if(req.url === '/') {\n    console.log('come in 127.0.0.1:9001 server')\n    res.writeHead(200,{\n      'Access-Control-Allow-Origin': '*', // 告诉浏览器允许访问的origin\n      'Access-Control-Allow-Methods': 'PUT', \n      'Allow-Control-Request-Method': 'PUT',\n      // 'Access-Control-Allow-Headers': 'X-Custom-Field',  // 用来指定允许的自定义header\n      // 'Access-Control-Max-Age': 0,   //指定预请求(prefight)的有效期， 单位为秒\n      // 'Cache-Control': 'no-store',\n      'Content-Type': 'text/plain'\n    })\n    res.end(JSON.stringify({\n      name: 'Tom'\n    }))\n  }\n}).listen(9001, '127.0.0.1')\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);