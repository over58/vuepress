(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{423:function(t,e,a){"use strict";a.r(e);var n=a(42),d=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"快速了解document-readystate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快速了解document-readystate"}},[t._v("#")]),t._v(" 快速了解document.readyState")]),t._v(" "),a("p",[t._v("document.readyState是一个只读属性，可以返回当前文档的准备状态。")]),t._v(" "),a("p",[t._v("语法\nvar state = document.readyState;\n其中state值包含下面三个值：")]),t._v(" "),a("h4",{attrs:{id:"loading"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#loading"}},[t._v("#")]),t._v(" loading")]),t._v(" "),a("p",[t._v("表示文档正在加载中。")]),t._v(" "),a("h4",{attrs:{id:"interactive"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interactive"}},[t._v("#")]),t._v(" interactive")]),t._v(" "),a("p",[t._v("表示文档已完成加载，文档已被解析，但图像、样式表和框架等子资源仍在加载。")]),t._v(" "),a("h4",{attrs:{id:"complete"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#complete"}},[t._v("#")]),t._v(" complete")]),t._v(" "),a("p",[t._v("表示文档和所有子资源已完成加载。如果状态变成这个，表明load事件即将触发。\ndocument.readyState是一个IE7，IE8浏览器也支持的很古老的属性，设计的初衷是好的，看起来也会是一个非常有用的属性，但是实际上我敢保证，对于绝大多数的前端开发人员，肯定没有在实际项目中用过这个属性。")]),t._v(" "),a("p",[t._v("包括我自己，在很长一段时间以内，都认为这个属性中看不中用，连个锤子用都没有。")]),t._v(" "),a("p",[t._v("为什么呢？")]),t._v(" "),a("p",[t._v("原因有两个：一是没必要；二是有更好的选择。")]),t._v(" "),a("h3",{attrs:{id:"dom事件绑定没必要等domready"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dom事件绑定没必要等domready"}},[t._v("#")]),t._v(" DOM事件绑定没必要等domready")]),t._v(" "),a("p",[t._v("对于web页面开发，JavaScript最主要的功能之一就是页面上DOM元素的交互实现，如果DOM元素还没有加载也没有被解析，自然这些DOM操作难以为继。于是，JS初始化的时机就变得很重要。")]),t._v(" "),a("p",[t._v("实际上，如果我们的JS文件以及script代码都放在页面的"),a("strong",[t._v("底部")]),t._v("，我们不用考虑JS初始化时机，因为JS放在底部，等到要执行的时候，上面DOM都已经解析好了，百分之一亿可以放心运行。也就是什么readyState，什么DOMContentLoaded都不需要考虑。")]),t._v(" "),a("p",[t._v("我们经常会看到下面的代码：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$(document).ready(function() {\n    // 少年的你，代码写在这里...\n});\n")])])]),a("p",[t._v("我会立即马上把$(document).ready这一戳东西删掉，只要你的JS代码是在页面底部的，这些都完全不需要，放心删除，绝对不会有任何问题，直接下面这样就好了：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("(function() {\n    // zhangxinxu: 这里代码...\n})();\n")])])]),a("p",[t._v("执行时机更快。")]),t._v(" "),a("p",[t._v("结合现状\n几乎所有的网页性能分析工具都会把JS文件放在底部作为考察项之一，JS放在底部已经算是网页开发常事之一了。很多萌新可能不知道，在10年前，绝大多数网页的JavaScript引用都是在"),a("strong",[t._v("head")]),t._v("中的，所以那个时期，有大量的文章探讨文档的加载机制，JS的执行时间等等问题。")]),t._v(" "),a("p",[t._v("随着一年一年的进步，现在这样的现象已经不多了，大家习惯都比较好，遇不到问题，自然探讨的就少了，探讨的少了，很多开发人员就不知道这样的事情，也就自然不会用了，毕竟，还有大把的新技术新框架要去学习呢。")]),t._v(" "),a("p",[t._v("这就是document.readyState以及'readystatechange'事件现在出现比较少的原因。")]),t._v(" "),a("p",[t._v("附上实际开发'readystatechange'事件使用示例：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("document.onreadystatechange = function () {\n    // document.readyState发生变化的时候执行\n}\n")])])]),a("h3",{attrs:{id:"domcontentloaded事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#domcontentloaded事件"}},[t._v("#")]),t._v(" DOMContentLoaded事件")]),t._v(" "),a("p",[t._v("document.readyState越来越少用到的另外一个原因，就是半路上杀出一个程咬金——'DOMContentLoaded'事件。")]),t._v(" "),a("p",[t._v("DOMContentLoaded事件是DOM Level 3新增的一个事件类型，IE9+浏览器支持，表示DOM节点内容加载完毕。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("document.addEventListener('DOMContentLoaded', function () {});\n或者：\n\nwindow.addEventListener('DOMContentLoaded', function () {});\n")])])]),a("p",[t._v("DOMContentLoaded设计初衷就是为了方便JS代码的初始化，要比记得记不住的interactive状态容易理解，也\n容易使用的多。")]),t._v(" "),a("p",[t._v("因此，如果为了提防我们的JavaScript代码不小心跑到了页面的顶部，需要确保在DOM加载完毕之后执行，推荐使用下面代码：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("window.addEventListener('DOMContentLoaded', function () {\n    // https://www.zhangxinxu.com/wordpress/?p=9032代码这里...\n});\n")])])]),a("p",[t._v("由于script元素本身也是DOM元素，因此，只要脚本不是异步加载的，无论放在页面什么位置，DOMContentLoaded事件一定会触发。")]),t._v(" "),a("p",[t._v("我们不妨来看一个例子，了解更多关于DOMContentLoaded事件触发更多细节。")]),t._v(" "),a("p",[t._v("假设有一个名为 insert.js 的文件，里面的JS代码如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("console.log('zxx被加载了~' + document.readyState);\nwindow.addEventListener('DOMContentLoaded', function () {\n    console.log('CSS选择器这本书很赞哦！' + document.readyState);\n});\n")])])]),a("p",[t._v("然后还有一个名为load-test.html的页面，里面代码这样：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<body>\n<script src="./insert.js"><\/script>\n</body>\n')])])]),a("p",[t._v("结果页面进入，控制台出现了下图所示的结果：")]),t._v(" "),a("p",[t._v("控制台输出结果截图")]),t._v(" "),a("p",[t._v("可以看到，\"DOMContentLoaded\"事件绑定时候文档状态是'loading'，执行的时候文档状态是可交互的'interactive'。")]),t._v(" "),a("p",[t._v("配合其他测试（这里不展示），我们可以得出一个网页文档几个加载状态变化和事件触发顺序是这样子的：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("document.readyState = 'loading'\n↓\ndocument.readyState变成'interactive'\n↓\n'DOMContentLoaded'事件执行\n↓\ndocument.readyState变成'complete'\n↓\n'load'事件执行\n")])])]),a("p",[t._v("以及可以推测出一个结论：")]),t._v(" "),a("p",[t._v("DOMContentLoaded事件必须在文档状态为loading时候绑定才有效。")]),t._v(" "),a("p",[t._v("正是由于上面推论，才使得document.readyState有了应用场景。")]),t._v(" "),a("h3",{attrs:{id:"需要用到document-readystate的场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#需要用到document-readystate的场景"}},[t._v("#")]),t._v(" 需要用到document.readyState的场景")]),t._v(" "),a("p",[t._v("由于DOMContentLoaded事件绑定后可能并不会执行，于是出现了需要用到document.readyState的场景。")]),t._v(" "),a("p",[t._v("什么时候DOMContentLoaded事件不会执行呢？")]),t._v(" "),a("p",[t._v("那就是相关脚本是在页面DOM加载完毕后执行的场景下。")]),t._v(" "),a("p",[t._v("眼见为实，我们看例子：")]),t._v(" "),a("p",[t._v("假设有一个名为 insert.js 的文件，里面的JS代码如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("console.log('zxx被加载了~' + document.readyState);\nwindow.addEventListener(\"DOMContentLoaded\", function () {\n    console.log('CSS选择器这本书很赞哦！');\n});\n")])])]),a("p",[t._v("然后还有一个名为load-test.html的页面，里面代码这样：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<body>\n  <script>\n    var eleScript = document.createElement('script');\n    eleScript.src = './insert.js';\n    document.head.appendChild(eleScript);\n  <\/script>\n</body>\n")])])]),a("p",[t._v("结果页面进入，控制台只有'zxx被加载了~'的文案，并没有DOMContentLoaded事件中的console.log输出，如下图所示：")]),t._v(" "),a("p",[t._v("因为DOMContentLoaded事件绑定的时候，页面的准备状态已经是'interactive'而不是'loading'了。")]),t._v(" "),a("p",[t._v("如果insert.js是一个公用组件，尤其以后会开源的那种，那势必要考虑到各种加载场景，页面的头部，页面底部，或者异步动态加载，此时，单纯靠DOMContentLoaded事件只能覆盖前两种情况，异步动态加载无能为力。")]),t._v(" "),a("p",[t._v("此时，一直认为没什么锤子用的document.readyState倒是排上了用场，假设组件的初始方法名为init，则好的实现方法是这样的：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("if (document.readyState != 'loading') {\n    init();\n} else {\n    window.addEventListener(\"DOMContentLoaded\", function () {\n        init();\n    });\n}\n")])])]),a("p",[t._v("这是当下实际开发中，唯一需要使用document.readyState的场景，在开源或者大规模使用的框架或组件中精准初始化使用。")]),t._v(" "),a("h3",{attrs:{id:"load-readstate-domcontentloaded-pageshow执行的先后顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#load-readstate-domcontentloaded-pageshow执行的先后顺序"}},[t._v("#")]),t._v(" load/readState/DomContentLoaded/pageshow执行的先后顺序")]),t._v(" "),a("p",[a("img",{attrs:{src:"/readyState%E5%92%8CDomContentLoaded%E7%9A%84%E5%85%88%E5%90%8E%E9%A1%BA%E5%BA%8F/image-20200824110347927.png",alt:"image-20200824110347927"}})]),t._v(" "),a("blockquote",[a("p",[t._v("摘自 https://www.zhangxinxu.com/wordpress/2019/10/document-readystate/")])])])}),[],!1,null,null,null);e.default=d.exports}}]);