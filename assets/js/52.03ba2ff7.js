(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{417:function(t,e,n){"use strict";n.r(e);var o=n(42),a=Object(o.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h4",{attrs:{id:"typeof"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#typeof"}},[t._v("#")]),t._v(" typeof")]),t._v(" "),n("p",[t._v("取值范围")]),t._v(" "),n("ul",[n("li",[t._v("number")]),t._v(" "),n("li",[t._v("string")]),t._v(" "),n("li",[t._v("object")]),t._v(" "),n("li",[t._v("function")]),t._v(" "),n("li",[t._v("boolean")]),t._v(" "),n("li",[t._v("symbol")]),t._v(" "),n("li",[t._v("boolean")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("typeof 12 // 'number'\ntypeof 'aa' // 'string'\ntypeof false // 'boolean'\ntypeof {} // 'object'\ntypeof function(){} // 'function'\ntypeof [] // 'object'\ntypeof new Date() // 'object'\ntypeof Symbol() // 'symbol'\ntypeof /\\w+/ig  // 'object'\n")])])]),n("h4",{attrs:{id:"instanceof"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#instanceof"}},[t._v("#")]),t._v(" instanceof")]),t._v(" "),n("p",[t._v("instanceof操作符可以帮助我们判断引用类型具体是什么类型的对象：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("[] instanceof Array // true\nnew Date() instanceof Date // true\nnew RegExp() instanceof RegExp // true\n")])])]),n("p",[t._v("我们先来回顾下原型链的几条规则：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("1.所有引用类型都具有对象特性，即可以自由扩展属性\n2.所有引用类型都具有一个__proto__（隐式原型）属性，是一个普通对象\n3.所有的函数都具有prototype（显式原型）属性，也是一个普通对象\n4.所有引用类型__proto__值指向它构造函数的prototype\n5.当试图得到一个对象的属性时，如果变量本身没有这个属性，则会去他的__proto__中去找\n")])])]),n("p",[t._v("[] instanceof Array实际上是判断Array.prototype是否在[]的原型链上。")]),t._v(" "),n("p",[t._v("所以，使用instanceof来检测数据类型，不会很准确，这不是它设计的初衷：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("[] instanceof Object // true\nfunction(){}  instanceof Object // true\n")])])]),n("p",[t._v("另外，使用instanceof也不能检测基本数据类型，所以instanceof并不是一个很好的选择。")]),t._v(" "),n("h4",{attrs:{id:"tostring"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tostring"}},[t._v("#")]),t._v(" toString")]),t._v(" "),n("p",[t._v("上面我们在拆箱操作中提到了toString函数，我们可以调用它实现从引用类型的转换。")]),t._v(" "),n("blockquote",[n("p",[t._v('每一个引用类型都有toString方法，默认情况下，toString()方法被每个Object对象继承。如果此方法在自定义对象中未被覆盖，toString() 返回 "[object type]"，其中type是对象的类型。')])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const obj = {};\nobj.toString() // [object Object]\n")])])]),n("p",[t._v("注意，上面提到了如果此方法在自定义对象中未被覆盖，toString才会达到预想的效果，事实上，大部分引用类型比如Array、Date、RegExp等都重写了toString方法。")]),t._v(" "),n("p",[t._v("我们可以直接调用Object原型上未被覆盖的toString()方法，使用call来改变this指向来达到我们想要的效果。")]),t._v(" "),n("p",[n("img",{attrs:{src:"/%E5%88%A4%E6%96%AD%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%96%B9%E5%BC%8F/type_convert.png",alt:"type_convert"}})]),t._v(" "),n("h4",{attrs:{id:"jquery中判断类型的方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jquery中判断类型的方式"}},[t._v("#")]),t._v(" jquery中判断类型的方式")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("var types = [\n  'Boolean',\n  'Number',\n  'String',\n  'Function',\n  'Array',\n  'Date',\n  'RegExp',\n  'Object',\n  'Error',\n  'Symbol'\n]\n\nvar class2type = {}\n\ntypes.forEach(name => {\n  class2type[`[object ${name}]`] = name.toLocaleLowerCase()\n})\n\nfunction type(obj) {\n  if (obj == null) {\n    return obj+''\n  }\n  return typeof obj === 'object' \n  ? class2type[Object.prototype.toString.call(obj)] || 'object' \n  : typeof obj\n}\n\n测试：\nconsole.log(type(12))   // number\nconsole.log(type('12'))  // string \nconsole.log(type(false))  // boolean\nconsole.log(type({}))    // object\nconsole.log(type([]))  // object\nconsole.log(type(Symbol()))   //symbol\nconsole.log(type(function(){}))  //function\nconsole.log(type(undefined))     //undefined\nconsole.log(type(null))    // null\nconsole.log(type(Boolean(1)))\n")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);