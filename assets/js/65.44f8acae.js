(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{411:function(t,n,e){"use strict";e.r(n);var a=e(42),r=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h3",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),e("p",[t._v("很多常见中由于事件频繁的被触发，造成频繁的执行Dom操作，资源加载等行为，导致UI卡顿甚至崩溃。")]),t._v(" "),e("ol",[e("li",[t._v("window 的resize和scroll事件")]),t._v(" "),e("li",[t._v("mousedown keydown mousemove keydup事件\n实际上对于window的resize事件，实际需求大多为停止改变大小n毫秒后执行后续处理；而其他事件大多的需求是以一定的频率执行后续处理。针对这两种需求就出现了debounce和throttle两种解决办法。")])]),t._v(" "),e("h3",{attrs:{id:"throttle"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#throttle"}},[t._v("#")]),t._v(" throttle")]),t._v(" "),e("h4",{attrs:{id:"介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),e("p",[t._v("每间隔一定的时间执行一次函数，在此期间内得多次函数调用忽略不处理")]),t._v(" "),e("h4",{attrs:{id:"demo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#demo"}},[t._v("#")]),t._v(" demo")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function throttle(fn, wait){\n  let pervious = 0\n\n  return function (...args) {\n    let now = Date.now()\n    if(now - pervious > wait) {\n      pervious = now\n      fn.apply(this, args)\n    }\n  }\n}\n")])])]),t._v(" "),e("h4",{attrs:{id:"underscore源码分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#underscore源码分析"}},[t._v("#")]),t._v(" underscore源码分析")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" /* options的默认值\n  *  表示首次调用返回值方法时，会马上调用func；否则仅会记录当前时刻，当第二次调用的时间间隔超过wait时，才调用func。\n  *  options.leading = true;\n  *  表示当调用方法时，未到达wait指定的时间间隔，则启动计时器延迟调用func函数，若后续在既未达到wait指定的时间间隔和func函数又未被调用的情况下调用返回值方法，则被调用请求将被丢弃。\n  *  options.trailing = true; \n  *  注意：当options.trailing = false时，效果与上面的简单实现效果相同\n  */\n_.throttle = function(func, wait, options) {\n    var timeout, context, args, result;\n    var previous = 0;\n    if (!options) options = {};\n\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n\n    var throttled = function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now; // 默认为时开头就调用一次的， Date.now() - previous (0) > wait\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) { // 当间隔大于wait 或者 当前时间小于上一个时间(！！！客户端人为的更改系统时间后，马上执行了func函数)\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        \n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) { // 无timeout和 允许结尾时调用一次函数 \n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n\n    throttled.cancel = function() {\n      clearTimeout(timeout);\n      previous = 0;\n      timeout = context = args = null;\n    };\n\n    return throttled;\n  };\n")])])]),e("h3",{attrs:{id:"防抖"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#防抖"}},[t._v("#")]),t._v(" 防抖")]),t._v(" "),e("h4",{attrs:{id:"介绍-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍-2"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),e("p",[t._v("如果用手指一直按住一个弹簧，它将不会弹起直到你松手为止。也就是说当调用动作n毫秒后，才会执行该动作，若在这n毫秒内又调用此动作则将重新计算执行时间。")]),t._v(" "),e("h4",{attrs:{id:"简单demo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简单demo"}},[t._v("#")]),t._v(" 简单demo")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function debouce (fn, wait, immediate) {\n  let timer = null\n  \n  return function(...args){\n    \x3c!-- 清除原来的延时器 --\x3e\n    if(tiemr) clearTimeout(timer)\n\n    \x3c!-- 第一次调用 --\x3e\n    if (immediate && !tiemr){\n      fn.apply(this, args)\n    }\n\n    timer = setTimeout(function() {\n      fn.apply(this, args)\n    }, wait)\n\n  }\n}\n")])])]),e("h4",{attrs:{id:"加强版的throttle"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#加强版的throttle"}},[t._v("#")]),t._v(" 加强版的throttle")]),t._v(" "),e("p",[t._v("现在考虑一种情况，如果用户的操作非常频繁，不等设置的延迟时间结束就进行下次操作，会频繁的清除计时器并重新生成，所以函数 fn 一直都没办法执行，导致用户操作迟迟得不到响应。\n有一种思想是将「节流」和「防抖」合二为一，变成加强版的节流函数，关键点在于「 wait 时间内，可以重新生成定时器，但只要 wait 的时间到了，必须给用户一个响应。这种合体思路恰好可以解决上面提出的问题。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function throttle(fn, wait , immediate) {\n  let pervious = 0\n  let timer = null\n\n  return function(...args) {\n    let now = Date.now()\n\n    if(now - pervious < wait) {\n      if (timer) clearTimeout(timer)\n      if (immediate && !timer) {\n        fn.apply(this, args)\n      }\n      timer = setTimeout(function() {\n        pervious = now\n        fn.apply(this, args)\n      })\n\n    }else{\n      pervious = now\n      fn.apply(this, args)\n    }\n  }\n}\n")])])]),e("h4",{attrs:{id:"underscore源码分析-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#underscore源码分析-2"}},[t._v("#")]),t._v(" underscore源码分析")]),t._v(" "),e("p",[t._v("实现原理和demo可以说是一摸一样")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 此处的三个参数上文都有解释\n_.debounce = function(func, wait, immediate) {\n  var timer, result;\n\n  // 定时器计时结束后\n  // 1、清空计时器，使之不影响下次连续事件的触发\n  // 2、触发执行 func\n  var later = function(context, args) {\n    timer = null;\n    if (args) result = func.apply(context, args);\n  };\n\n  // 将 debounce 处理结果当作函数返回\n  var debounced = restArguments(function(args) {\n    if (timer) clearTimeout(timer);\n    if (immediate) {\n      // 第一次触发后会设置 timer，\n      // 根据 timer 是否为空可以判断是否是首次触发\n      var callNow = !timer;\n      timer = setTimeout(later, wait);\n      if (callNow) result = func.apply(this, args);\n    } else {\n        // 设置定时器\n      timer = _.delay(later, wait, this, args);\n    }\n\n    return result;\n  });\n\n  // 新增 手动取消\n  debounced.cancel = function() {\n    clearTimeout(timer);\n    timer = null;\n  };\n\n  return debounced;\n};\n\n// 根据给定的毫秒 wait 延迟执行函数 func\n_.delay = restArguments(function(func, wait, args) {\n  return setTimeout(function() {\n    return func.apply(null, args);\n  }, wait);\n});\n")])])])])}),[],!1,null,null,null);n.default=r.exports}}]);