(window.webpackJsonp=window.webpackJsonp||[]).push([[103],{372:function(e,t,a){"use strict";a.r(t);var r=a(42),n=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h3",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),a("p",[e._v("JavaScript 的对象，拥有任意数量的唯一键，键可以是字符串（String）类型或标记（Symbol，ES6 新增的基本数据类型）类型，每个键对应一个值，值可以是任意类型的任意值。对于对象内的属性，JavaScript 提供了一个属性描述器接口 PropertyDescriptor")]),e._v(" "),a("h3",{attrs:{id:"定义对象的属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义对象的属性"}},[e._v("#")]),e._v(" 定义对象的属性")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var obj = {\n  name: 'Tom',\n  sex: 'man\n}\n\nor\n\nvar obj = {}\nobj.name = 'Tom'\n")])])]),a("h3",{attrs:{id:"object-defineproperty"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-defineproperty"}},[e._v("#")]),e._v(" Object.defineProperty()")]),e._v(" "),a("p",[e._v("上面使用的方式不能对属性描述符的操作，需要使用 Object.ddefineProperty(obj, prop, descriptor)")]),e._v(" "),a("h4",{attrs:{id:"当使用-defineproperty-方法操作属性的时候-描述符的默认值为"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#当使用-defineproperty-方法操作属性的时候-描述符的默认值为"}},[e._v("#")]),e._v(" 当使用 defineProperty()方法操作属性的时候，描述符的默认值为：")]),e._v(" "),a("ol",[a("li",[e._v("value: undefined")]),e._v(" "),a("li",[e._v("set: undefined")]),e._v(" "),a("li",[e._v("get: undefined")]),e._v(" "),a("li",[e._v("writable: false")]),e._v(" "),a("li",[e._v("enumerable: false")]),e._v(" "),a("li",[e._v("configable: false")])]),e._v(" "),a("h4",{attrs:{id:"不使用该方法定义属性-默认值为"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不使用该方法定义属性-默认值为"}},[e._v("#")]),e._v(" 不使用该方法定义属性，默认值为：")]),e._v(" "),a("ol",[a("li",[e._v("value: undefined")]),e._v(" "),a("li",[e._v("set: undefined")]),e._v(" "),a("li",[e._v("get: undefined")]),e._v(" "),a("li",[e._v("writable: true")]),e._v(" "),a("li",[e._v("enumerable: true")]),e._v(" "),a("li",[e._v("configable: true")])]),e._v(" "),a("h4",{attrs:{id:"还支持批量修改对象属性以及描述对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#还支持批量修改对象属性以及描述对象"}},[e._v("#")]),e._v(" 还支持批量修改对象属性以及描述对象")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Object.defineProperties(obj, {\n  name: {\n    value: 'Tom',\n    configable: true\n  },\n  sex: {\n    value: 'man'\n  }\n})\n")])])]),e._v(" "),a("h4",{attrs:{id:"读取属性描述符对象-object-getownpropertydescriptor-obj-prop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#读取属性描述符对象-object-getownpropertydescriptor-obj-prop"}},[e._v("#")]),e._v(" 读取属性描述符对象 Object.getOwnPropertyDescriptor(obj,prop)")]),e._v(" "),a("h3",{attrs:{id:"属性描述符对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性描述符对象"}},[e._v("#")]),e._v(" 属性描述符对象")]),e._v(" "),a("h4",{attrs:{id:"value-属性的值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#value-属性的值"}},[e._v("#")]),e._v(" value 属性的值")]),e._v(" "),a("h4",{attrs:{id:"存储器函数-setter-getter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存储器函数-setter-getter"}},[e._v("#")]),e._v(" 存储器函数（setter/getter）")]),e._v(" "),a("p",[e._v("1.get\n2.set")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var x = {}\nObject.defineProperty(x, 'count', {\n  get: funciton () {\n    return this.value\n  },\n  set: function (val) { \n    this.count = val\n  } \n})\nconsole.log(x) \nx.count = 1 \nconsole.log(x.count)\n\n")])])]),a("p",[e._v("执行上面的代码，会发现报错，执行栈溢出。")]),e._v(" "),a("blockquote",[a("p",[e._v("上述代码在执行set 函数中执行 count赋值操作的时候(this.count = val)，循环调用自己，形成了死循环。\n更改为以下代码：")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var x = {}\nObject.defineProperty(x, 'count', {\n  get: () {\n    return this._count\n  }\n  set: function (val) { \n     this._count = val \n  }\n})\nconsole.log(x) \nx.count = 1 \nconsole.log(x.count)\n")])])]),a("p",[e._v("实际上，在使用 defineProperty()方法设置对象的属性的时候，通常需要在对象内部维护一个新的内部变量(以下划线_开头，表示为内部变量)")]),e._v(" "),a("blockquote",[a("p",[e._v("注：当设置了存取器描述时，不能设置value 和writable, 可以当作没有这两个属性")])]),e._v(" "),a("h4",{attrs:{id:"writable-指定对象的value是否可以改变"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#writable-指定对象的value是否可以改变"}},[e._v("#")]),e._v(" writable 指定对象的value是否可以改变")]),e._v(" "),a("h4",{attrs:{id:"enumerable-指定对象中的某属性是否可以枚举-就是for-in-操作是否可以遍历出来"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#enumerable-指定对象中的某属性是否可以枚举-就是for-in-操作是否可以遍历出来"}},[e._v("#")]),e._v(" enumerable 指定对象中的某属性是否可以枚举，就是for in 操作是否可以遍历出来")]),e._v(" "),a("h4",{attrs:{id:"configable-指定对象属性的描述符是否可以改变"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configable-指定对象属性的描述符是否可以改变"}},[e._v("#")]),e._v(" configable 指定对象属性的描述符是否可以改变")])])}),[],!1,null,null,null);t.default=n.exports}}]);