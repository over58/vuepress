(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{440:function(t,e,a){"use strict";a.r(e);var s=a(42),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"一般的做法-直接merge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一般的做法-直接merge"}},[t._v("#")]),t._v(" 一般的做法（直接merge）")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git chekcout another\nmodify ...\ngit chekcout master\ngit merge another\n\n")])])]),a("h3",{attrs:{id:"改进版本-合并多个提交为一条-git-merge-squash-branchname"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#改进版本-合并多个提交为一条-git-merge-squash-branchname"}},[t._v("#")]),t._v(" 改进版本:合并多个提交为一条(git merge --squash branchname)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('git merge --squash another\ngit commit -m "message here"\n')])])]),a("p",[t._v("--squash含义和原理如下:")]),t._v(" "),a("p",[t._v("--squash选项的含义是：本地文件内容与不使用该选项的合并结果相同，但是不提交、不移动HEAD，因此需要一条额外的commit命令。其效果相当于将another分支上的多个commit合并成一个，放在当前分支上，原来的commit历史则没有拿过来。")]),t._v(" "),a("p",[t._v("判断是否使用--squash选项最根本的标准是，待合并分支上的历史是否有意义。")]),t._v(" "),a("p",[t._v("如果在开发分支上提交非常随意，甚至写成微博体，那么一定要使用--squash选项。版本历史记录的应该是代码的发展，而不是开发者在编码时的活动。")]),t._v(" "),a("p",[t._v("只有在开发分支上每个commit都有其独自存在的意义，并且能够编译通过的情况下（能够通过测试就更完美了），才应该选择缺省的合并方式来保留commit历史。")])])}),[],!1,null,null,null);e.default=r.exports}}]);