(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{463:function(t,e,n){"use strict";n.r(e);var a=n(42),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h3",{attrs:{id:"方法一-props、-emit"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法一-props、-emit"}},[t._v("#")]),t._v(" 方法一 props、$emit")]),t._v(" "),n("p",[t._v("父组件A通过props的方式向子组件B传递，B to A 通过在 B 组件中 $emit, A 组件中 v-on 的方式实现。")]),t._v(" "),n("h4",{attrs:{id:"_1-父组件向子组件传值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-父组件向子组件传值"}},[t._v("#")]),t._v(" 1.父组件向子组件传值")]),t._v(" "),n("p",[t._v('接下来我们通过一个例子，说明父组件如何向子组件传递值：在子组件Users.vue中如何获取父组件App.vue中的数据 users:["Henry","Bucky","Emily"')]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('    //App.vue父组件\n    <template>\n      <div id="app">\n        <users v-bind:users="users"></users>//前者自定义名称便于子组件调用，后者要传递数据名\n      </div>\n    </template>\n    <script>\n    import Users from "./components/Users"\n    export default {\n      name: \'App\',\n      data(){\n        return{\n          users:["Henry","Bucky","Emily"]\n        }\n      },\n      components:{\n        "users":Users\n      }\n    }\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('    //users子组件\n    <template>\n      <div class="hello">\n        <ul>\n          <li v-for="user in users">{{user}}</li>//遍历传递过来的值，然后呈现到页面\n        </ul>\n      </div>\n    </template>\n    <script>\n    export default {\n      name: \'HelloWorld\',\n      props:{\n        users:{           //这个就是父组件中子标签自定义名字\\\n          type:Array,\n          required:true\n        }\n      }\n    }\n    <\/script>\n')])])]),n("p",[t._v("总结：父组件通过props向下传递数据给子组件。注：组件中的数据共有三种形式：data、props、computed")]),t._v(" "),n("h4",{attrs:{id:"_2-子组件向父组件传值-通过事件形式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-子组件向父组件传值-通过事件形式"}},[t._v("#")]),t._v(" 2.子组件向父组件传值（通过事件形式）")]),t._v(" "),n("p",[t._v("接下来我们通过一个例子，说明子组件如何向父组件传递值：当我们点击“Vue.js Demo”后，子组件向父组件传递值，文字由原来的“传递的是一个值”变成“子向父组件传值”，实现子组件向父组件值的传递。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('    // 子组件\n    <template>\n      <header>\n        <h1 @click="changeTitle">{{title}}</h1>//绑定一个点击事件\n      </header>\n    </template>\n    <script>\n    export default {\n      name: \'app-header\',\n      data() {\n        return {\n          title:"Vue.js Demo"\n        }\n      },\n      methods:{\n        changeTitle() {\n          this.$emit("titleChanged","子向父组件传值");//自定义事件  传递值“子向父组件传值”\n        }\n      }\n    }\n    <\/script>\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('    // 父组件\n    <template>\n      <div id="app">\n        <app-header v-on:titleChanged="updateTitle" ></app-header>//与子组件titleChanged自定义事件保持一致\n       // updateTitle($event)接受传递过来的文字\n        <h2>{{title}}</h2>\n      </div>\n    </template>\n    <script>\n    import Header from "./components/Header"\n    export default {\n      name: \'App\',\n      data(){\n        return{\n          title:"传递的是一个值"\n        }\n      },\n      methods:{\n        updateTitle(e){   //声明这个函数\n          this.title = e;\n        }\n      },\n      components:{\n       "app-header":Header,\n      }\n    }\n    <\/script>\n')])])]),n("p",[t._v("总结：子组件通过events给父组件发送消息，实际上就是子组件把自己的数据发送到父组件。")]),t._v(" "),n("h3",{attrs:{id:"方法二、-emit-on"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法二、-emit-on"}},[t._v("#")]),t._v(" 方法二、 $emit　/ $on")]),t._v(" "),n("p",[t._v("这种方法通过一个空的Vue实例作为中央事件总线（事件中心），用它来触发事件和监听事件,巧妙而轻量地实现了任何组件间的通信，包括父子、兄弟、跨级。当我们的项目比较大时，可以选择更好的状态管理解决方案vuex。")]),t._v(" "),n("h4",{attrs:{id:"_1-具体实现方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-具体实现方式"}},[t._v("#")]),t._v(" 1.具体实现方式：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("  var Event=new Vue();\n  Event.$emit(事件名,数据);\n  Event.$on(事件名,data => {});\n")])])]),n("h4",{attrs:{id:"_2-举个例子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-举个例子"}},[t._v("#")]),t._v(" 2.举个例子")]),t._v(" "),n("p",[t._v("假设兄弟组件有三个，分别是A、B、C组件，C组件如何获取A或者B组件的数据")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("    <div id=\"itany\">\n        <my-a></my-a>\n        <my-b></my-b>\n        <my-c></my-c>\n    </div>\n    <template id=\"a\">\n      <div>\n        <h3>A组件：{{name}}</h3>\n        <button @click=\"send\">将数据发送给C组件</button>\n      </div>\n    </template>\n    <template id=\"b\">\n      <div>\n        <h3>B组件：{{age}}</h3>\n        <button @click=\"send\">将数组发送给C组件</button>\n      </div>\n    </template>\n    <template id=\"c\">\n      <div>\n        <h3>C组件：{{name}}，{{age}}</h3>\n      </div>\n    </template>\n    <script>\n    var Event = new Vue();//定义一个空的Vue实例\n    var A = {\n        template: '#a',\n        data() {\n          return {\n            name: 'tom'\n          }\n        },\n        methods: {\n          send() {\n            Event.$emit('data-a', this.name);\n          }\n        }\n    }\n    var B = {\n        template: '#b',\n        data() {\n          return {\n            age: 20\n          }\n        },\n        methods: {\n          send() {\n            Event.$emit('data-b', this.age);\n          }\n        }\n    }\n    var C = {\n        template: '#c',\n        data() {\n          return {\n            name: '',\n            age: \"\"\n          }\n        },\n        mounted() {//在模板编译完成后执行\n         Event.$on('data-a',name => {\n             this.name = name;//箭头函数内部不会产生新的this，这边如果不用=>,this指代Event\n         })\n         Event.$on('data-b',age => {\n             this.age = age;\n         })\n        }\n    }\n    var vm = new Vue({\n        el: '#itany',\n        components: {\n          'my-a': A,\n          'my-b': B,\n          'my-c': C\n        }\n    });    \n    <\/script>\n")])])]),n("p",[n("img",{attrs:{src:"/images/vue/eventBus.gif",alt:"eventBus"}}),t._v("\n监听了自定义事件 data-a和data-b，因为有时不确定何时会触发事件，一般会在 mounted 或 created 钩子中来监听。")]),t._v(" "),n("h3",{attrs:{id:"方法三、vuex"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法三、vuex"}},[t._v("#")]),t._v(" 方法三、vuex")]),t._v(" "),n("p",[n("img",{attrs:{src:"/images/vue/vuex.png",alt:"vuex"}})]),t._v(" "),n("h4",{attrs:{id:"_1-简要介绍vuex原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-简要介绍vuex原理"}},[t._v("#")]),t._v(" 1.简要介绍Vuex原理")]),t._v(" "),n("p",[t._v("Vuex实现了一个单向数据流，在全局拥有一个State存放数据，当组件要更改State中的数据时，必须通过Mutation进行，Mutation同时提供了订阅者模式供外部插件调用获取State数据的更新。而当所有异步操作(常见于调用后端接口异步获取更新数据)或批量的同步操作需要走Action，但Action也是无法直接修改State的，还是需要通过Mutation来修改State的数据。最后，根据State的变化，渲染到视图上。")]),t._v(" "),n("h4",{attrs:{id:"_2-简要介绍各模块在流程中的功能"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-简要介绍各模块在流程中的功能"}},[t._v("#")]),t._v(" 2.简要介绍各模块在流程中的功能：")]),t._v(" "),n("ul",[n("li",[t._v("Vue Components：Vue组件。HTML页面上，负责接收用户操作等交互行为，执行dispatch方法触发对应action进行回应。")]),t._v(" "),n("li",[t._v("dispatch：操作行为触发方法，是唯一能执行action的方法。")]),t._v(" "),n("li",[t._v("actions：操作行为处理模块,由组件中的 $store.dispatch('action 名称',data1)来触发。然后由commit()来触发mutation的调用 , 间接更新 state。负责处理Vue Components接收到的所有交互行为。包含同步/异步操作，支持多个同名方法，按照注册的顺序依次触发。向后台API请求的操作就在这个模块中进行，包括触发其他action以及提交mutation的操作。该模块提供了Promise的封装，以支持action的链式触发。")]),t._v(" "),n("li",[t._v("commit：状态改变提交操作方法。对mutation进行提交，是唯一能执行mutation的方法。")]),t._v(" "),n("li",[t._v("mutations：状态改变操作方法，由actions中的 commit('mutation 名称')来触发。是Vuex修改state的唯一推荐方法。该方法只能进行同步操作，且方法名只能全局唯一。操作之中会有一些hook暴露出来，以进行state的监控等。")]),t._v(" "),n("li",[t._v("state：页面状态管理容器对象。集中存储Vue components中data对象的零散数据，全局唯一，以进行统一的状态管理。页面显示所需的数据从该对象中进行读取，利用Vue的细粒度数据响应机制来进行高效的状态更新。")]),t._v(" "),n("li",[t._v("getters：state对象读取方法。图中没有单独列出该模块，应该被包含在了render中，Vue Components通过该方法读取全局state对象。")])]),t._v(" "),n("h4",{attrs:{id:"_3-vuex与localstorage"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-vuex与localstorage"}},[t._v("#")]),t._v(" 3.Vuex与localStorage")]),t._v(" "),n("p",[t._v("vuex 是 vue 的状态管理器，存储的数据是响应式的。但是并不会保存起来，刷新之后就回到了初始状态，具体做法应该在vuex里数据改变的时候把数据拷贝一份保存到localStorage里面，刷新之后，如果localStorage里有保存的数据，取出来再替换store里的state。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("    let defaultCity = \"上海\"\n    try {   // 用户关闭了本地存储功能，此时在外层加个try...catch\n      if (!defaultCity){\n        defaultCity = JSON.parse(window.localStorage.getItem('defaultCity'))\n      }\n    }catch(e){}\n    export default new Vuex.Store({\n      state: {\n        city: defaultCity\n      },\n      mutations: {\n        changeCity(state, city) {\n          state.city = city\n          try {\n          window.localStorage.setItem('defaultCity', JSON.stringify(state.city));\n          // 数据改变的时候把数据拷贝一份保存到localStorage里面\n          } catch (e) {}\n        }\n      }\n    })\n")])])]),n("p",[t._v("这里需要注意的是：由于vuex里，我们保存的状态，都是数组，而localStorage只支持字符串，所以需要用JSON转换：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('    JSON.stringify(state.subscribeList);   // array -> string\n    JSON.parse(window.localStorage.getItem("subscribeList"));    // string -> array \n')])])]),n("h3",{attrs:{id:"方法四、-attrs-listeners"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法四、-attrs-listeners"}},[t._v("#")]),t._v(" 方法四、 $attrs　/ $listeners")]),t._v(" "),n("p",[t._v('1.简介\n多级组件嵌套需要传递数据时，通常使用的方法是通过vuex。但如果仅仅是传递数据，而不做中间处理，使用 vuex 处理，未免有点大材小用。为此Vue2.4 版本提供了另一种方法---- $attrs/ $listeners\n$attrs：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 v-bind="$attrs" 传入内部组件。通常配合 interitAttrs 选项一起使用。\n$listeners：包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on="$listeners" 传入内部组件\n接下来我们看个跨级通信的例子：')]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('    // index.vue\n    <template>\n      <div>\n        <h2>浪里行舟</h2>\n        <child-com1\n          :foo="foo"\n          :boo="boo"\n          :coo="coo"\n          :doo="doo"\n          title="前端工匠"\n        ></child-com1>\n      </div>\n    </template>\n    <script>\n    const childCom1 = () => import("./childCom1.vue");\n    export default {\n      components: { childCom1 },\n      data() {\n        return {\n          foo: "Javascript",\n          boo: "Html",\n          coo: "CSS",\n          doo: "Vue"\n        };\n      }\n    };\n    <\/script>\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('    // childCom1.vue\n    <template class="border">\n      <div>\n        <p>foo: {{ foo }}</p>\n        <p>childCom1的$attrs: {{ $attrs }}</p>\n        <child-com2 v-bind="$attrs"></child-com2>\n      </div>\n    </template>\n    <script>\n    const childCom2 = () => import("./childCom2.vue");\n    export default {\n      components: {\n        childCom2\n      },\n      inheritAttrs: false, // 可以关闭自动挂载到组件根元素上的没有在props声明的属性\n      props: {\n        foo: String // foo作为props属性绑定\n      },\n      created() {\n        console.log(this.$attrs); // { "boo": "Html", "coo": "CSS", "doo": "Vue", "title": "前端工匠" }\n      }\n    };\n    <\/script>\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('    // childCom2.vue\n    <template>\n      <div class="border">\n        <p>boo: {{ boo }}</p>\n        <p>childCom2: {{ $attrs }}</p>\n        <child-com3 v-bind="$attrs"></child-com3>\n      </div>\n    </template>\n    <script>\n    const childCom3 = () => import("./childCom3.vue");\n    export default {\n      components: {\n        childCom3\n      },\n      inheritAttrs: false,\n      props: {\n        boo: String\n      },\n      created() {\n        console.log(this.$attrs); // { "boo": "Html", "coo": "CSS", "doo": "Vue", "title": "前端工匠" }\n      }\n    };\n    <\/script>\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('    // childCom3.vue\n    <template>\n      <div class="border">\n        <p>childCom3: {{ $attrs }}</p>\n      </div>\n    </template>\n    <script>\n    export default {\n      props: {\n        coo: String,\n        title: String\n      }\n    };\n    <\/script>\n')])])]),n("p",[n("img",{attrs:{src:"/$attrs%E5%92%8C$listeners.png",alt:"$attrs和$listeners"}}),t._v("\n$attrs表示没有继承数据的对象，格式为{属性名：属性值}。Vue2.4提供了 $attrs , $listeners 来传递数据与事件，跨级组件之间的通讯变得更简单。\n简单来说： $attrs与 $listeners 是两个对象， $attrs 里存放的是父组件中绑定的非 Props 属性， $listeners里存放的是父组件中绑定的非原生事件。")]),t._v(" "),n("h3",{attrs:{id:"方法五、provide-inject"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法五、provide-inject"}},[t._v("#")]),t._v(" 方法五、provide/inject")]),t._v(" "),n("h4",{attrs:{id:"_1-简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-简介"}},[t._v("#")]),t._v(" 1.简介")]),t._v(" "),n("p",[t._v("Vue2.2.0新增API,这对选项需要一起使用，以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效。一言而蔽之：祖先组件中通过provider来提供变量，然后在子孙组件中通过inject来注入变量。provide / inject API 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。")]),t._v(" "),n("h4",{attrs:{id:"_2-举个例子-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-举个例子-2"}},[t._v("#")]),t._v(" 2.举个例子")]),t._v(" "),n("p",[t._v("假设有两个组件： A.vue 和 B.vue，B 是 A 的子组件")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("    // A.vue\n    export default {\n      provide: {\n        name: '浪里行舟'\n      }\n    }\n    // B.vue\n    export default {\n      inject: ['name'],\n      mounted () {\n        console.log(this.name);  // 浪里行舟\n      }\n    }\n")])])]),n("p",[t._v("可以看到，在 A.vue 里，我们设置了一个 provide: name，值为 浪里行舟，它的作用就是将 name 这个变量提供给它的所有子组件。而在 B.vue 中，通过 inject 注入了从 A 组件中提供的 name 变量，那么在组件 B 中，就可以直接通过 this.name 访问这个变量了，它的值也是 浪里行舟。这就是 provide / inject API 最核心的用法。\n需要注意的是：provide 和 inject 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的----vue官方文档所以，上面 A.vue 的 name 如果改变了，B.vue 的 this.name 是不会改变的")]),t._v(" "),n("h4",{attrs:{id:"_3-provide与inject-怎么实现数据响应式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-provide与inject-怎么实现数据响应式"}},[t._v("#")]),t._v(" 3.provide与inject 怎么实现数据响应式")]),t._v(" "),n("p",[t._v("一般来说，有两种办法：")]),t._v(" "),n("ul",[n("li",[t._v("provide祖先组件的实例，然后在子孙组件中注入依赖，这样就可以在子孙组件中直接修改祖先组件的实例的属性，不过这种方法有个缺点就是这个实例上挂载很多没有必要的东西比如props，methods")]),t._v(" "),n("li",[t._v("使用2.6最新API Vue.observable 优化响应式 provide(推荐)\n我们来看个例子：孙组件D、E和F获取A组件传递过来的color值，并能实现数据响应式变化，即A组件的color变化后，组件D、E、F不会跟着变（核心代码如下：）\n"),n("img",{attrs:{src:"/images/vue/provide%E4%B8%8Einject.png",alt:"provide和inject"}})])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('    // A 组件 \n    <div>\n          <h1>A 组件</h1>\n          <button @click="() => changeColor()">改变color</button>\n          <ChildrenB />\n          <ChildrenC />\n    </div>\n    ......\n      data() {\n        return {\n          color: "blue"\n        };\n      },\n      // provide() {\n      //   return {\n      //     theme: {\n      //       color: this.color //这种方式绑定的数据并不是可响应的\n      //     } // 即A组件的color变化后，组件D、E、F不会跟着变\n      //   };\n      // },\n      provide() {\n        return {\n          theme: this//方法一：提供祖先组件的实例\n        };\n      },\n      methods: {\n        changeColor(color) {\n          if (color) {\n            this.color = color;\n          } else {\n            this.color = this.color === "blue" ? "red" : "blue";\n          }\n        }\n      }\n      // 方法二:使用vue2.6最新API Vue.observable 优化响应式 provide\n      // provide() {\n      //   this.theme = Vue.observable({\n      //     color: "blue"\n      //   });\n      //   return {\n      //     theme: this.theme\n      //   };\n      // },\n      // methods: {\n      //   changeColor(color) {\n      //     if (color) {\n      //       this.theme.color = color;\n      //     } else {\n      //       this.theme.color = this.theme.color === "blue" ? "red" : "blue";\n      //     }\n      //   }\n      // }\n    // F 组件 \n    <template functional>\n      <div class="border2">\n        <h3 :style="{ color: injections.theme.color }">F 组件</h3>\n      </div>\n    </template>\n    <script>\n    export default {\n      inject: {\n        theme: {\n          //函数式组件取值不一样\n          default: () => ({})\n        }\n      }\n    };\n    <\/script>\n')])])]),n("p",[t._v("虽说provide 和 inject 主要为高阶插件/组件库提供用例，但如果你能在业务中熟练运用，可以达到事半功倍的效果！")]),t._v(" "),n("h3",{attrs:{id:"方法六、-parent-children-ref"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法六、-parent-children-ref"}},[t._v("#")]),t._v(" 方法六、 $parent / $children　＆ ref")]),t._v(" "),n("ul",[n("li",[t._v("ref：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例")]),t._v(" "),n("li",[t._v("$parent / $children：访问父 / 子实例\n需要注意的是：这两种都是直接得到组件实例，使用后可以直接调用组件的方法或访问数据。我们先来看个用 ref来访问组件的例子：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("    // component-a 子组件\n    export default {\n      data () {\n        return {\n          title: 'Vue.js'\n        }\n      },\n      methods: {\n        sayHello () {\n          window.alert('Hello');\n        }\n      }\n    }\n    // 父组件\n    <template>\n      <component-a ref=\"comA\"></component-a>\n    </template>\n    <script>\n      export default {\n        mounted () {\n          const comA = this.$refs.comA;\n          console.log(comA.title);  // Vue.js\n          comA.sayHello();  // 弹窗\n        }\n      }\n    <\/script>\n")])])]),n("p",[t._v("不过，这两种方法的弊端是，无法在跨级或兄弟间通信。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("    // parent.vue\n    <component-a></component-a>\n    <component-b></component-b>\n    <component-b></component-b>\n")])])]),n("p",[t._v("我们想在 component-a 中，访问到引用它的页面中（这里就是 parent.vue）的两个 component-b 组件，那这种情况下，就得配置额外的插件或工具了，比如 Vuex 和 Bus 的解决方案")]),t._v(" "),n("h3",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),n("p",[t._v("常见使用场景可以分为三类：")]),t._v(" "),n("ul",[n("li",[t._v("父子通信： 父向子传递数据是通过 props，子向父是通过 events（ $emit）；通过父链 / 子链也可以通信（ $parent / $children）；ref 也可以访问组件实例；provide / inject API； $attrs/$listeners")]),t._v(" "),n("li",[t._v("兄弟通信： Bus；Vuex")]),t._v(" "),n("li",[t._v("跨级通信： Bus；Vuex；provide / inject API、 $attrs/$listeners")])])])}),[],!1,null,null,null);e.default=s.exports}}]);