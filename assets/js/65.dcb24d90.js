(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{411:function(n,t,o){"use strict";o.r(t);var e=o(42),l=Object(e.a)({},(function(){var n=this,t=n.$createElement,o=n._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[o("ul",[o("li",[n._v("装箱转换：把基本类型转换为对应的包装类型")]),n._v(" "),o("li",[n._v("拆箱操作：把引用类型转换为基本类型")])]),n._v(" "),o("p",[n._v("既然原始类型不能扩展属性和方法，那么我们是如何使用原始类型调用方法的呢？")]),n._v(" "),o("p",[n._v("每当我们操作一个基础类型时，后台就会自动创建一个包装类型的对象，从而让我们能够调用一些方法和属性，例如下面的代码：")]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[n._v('var name = "ConardLi";\nvar name2 = name.substring(2);\n')])])]),o("p",[n._v("实际上发生了以下几个过程：")]),n._v(" "),o("ol",[o("li",[n._v("创建一个String的包装类型实例")]),n._v(" "),o("li",[n._v("在实例上调用substring方法")]),n._v(" "),o("li",[n._v("销毁实例")])]),n._v(" "),o("p",[n._v("也就是说，我们使用基本类型调用方法，就会自动进行装箱和拆箱操作，相同的，我们使用Number和Boolean类型时，也会发生这个过程。")]),n._v(" "),o("p",[n._v("从引用类型到基本类型的转换，也就是拆箱的过程中，会遵循ECMAScript规范规定的toPrimitive原则，一般会调用引用类型的valueOf和toString方法，你也可以直接重写toPeimitive方法。一般转换成不同类型的值遵循的原则不同，例如：")]),n._v(" "),o("ul",[o("li",[n._v("引用类型转换为Number类型，先调用valueOf，再调用toString")]),n._v(" "),o("li",[n._v("引用类型转换String类型, 先调用toString，再调用valueOf")])]),n._v(" "),o("p",[n._v("若valueOf和toString都不存在，或者没有返回基本类型，则抛出TypeError异常。")]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[n._v("const obj = {\n  valueOf: () => { console.log('valueOf'); return 123; },\n  toString: () => { console.log('toString'); return 'ConardLi'; },\n};\nconsole.log(obj - 1);   // valueOf   122\nconsole.log(`${obj}ConardLi`); // toString  ConardLiConardLi\n\nconst obj2 = {\n  [Symbol.toPrimitive]: () => { console.log('toPrimitive'); return 123; },\n};\nconsole.log(obj2 - 1);   // valueOf   122\n\nconst obj3 = {\n  valueOf: () => { console.log('valueOf'); return {}; },\n  toString: () => { console.log('toString'); return {}; },\n};\nconsole.log(obj3 - 1);  \n// valueOf  \n// toString\n// TypeError\n")])])]),o("p",[n._v("除了程序中的自动拆箱和自动装箱，我们还可以手动进行拆箱和装箱操作。我们可以直接调用包装类型的valueOf或toString，实现拆箱操作：")]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[n._v('var num =new Number("123");  \nconsole.log( typeof num.valueOf() ); //number\nconsole.log( typeof num.toString() ); //string\n')])])])])}),[],!1,null,null,null);t.default=l.exports}}]);